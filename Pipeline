pipeline {
    agent any

    environment {
        PIPIPELINE_CODE = '/path/to/Pipeline'
        TEST_ENV = 'testing'
        PROD_ENV = 'yourname_production'
        NOTIFICATION_EMAIL = 'ajayofficial1998@gmail.com'
    }

    stages {
        stage('Build') {
            steps {
                echo 'Build the code by Maven...! from $PIPIPELINE_CODE"'
                echo 'mvn clean package'
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                echo 'Execute the Unit Test...!'
                echo 'Unit test using Cucumber'
                echo 'Execute the Integration Test...!'
                echo 'Integration test using Robot Framework'
            }
            post {
                success {
                    mail to: "${env.NOTIFICATION_EMAIL}",
                         subject: 'Unit Test and Integration Test are Successful',
                         body: 'The Testing executed successfully...! See attached logs for details.<br>Console Output: ${env.BUILD_URL}console',
                         mimeType: 'text/html'
                }
                failure {
                    mail to: "${env.NOTIFICATION_EMAIL}",
                         subject: 'Unit and Integration Tests Failed',
                         body: 'Unit and Integration Tests have failed. See attached logs for details.<br>Console Output: ${env.BUILD_URL}console',
                         mimeType: 'text/html'
                }
            }
        }
        stage('Code Analysis') {
            steps {
               echo 'Integrate SonarQube Analysis...!'
               echo 'Analyzing the code using SonarQube'
            }
        }
        stage('Security Scan') {
            steps {
               echo 'Perform Security Scan...!'
               echo 'Security Scanning using SonarQube'
            }
            post {
                success {
                    mail to: "${env.NOTIFICATION_EMAIL}",
                         subject: 'Security Scan Passed',
                         body: 'Security scan was Successful. See attached logs for details.<br>Console Output: ${env.BUILD_URL}console',
                         mimeType: 'text/html'
                }
                failure {
                    mail to: "${env.NOTIFICATION_EMAIL}",
                         subject: 'Security Scan Failed',
                         body: 'Security scan failed. See attached logs for details.<br>Console Output: ${env.BUILD_URL}console',
                         mimeType: 'text/html'
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                echo "Deploy to the staging using AWS EC2 instance...! $env.TEST_ENV environment"
                echo 'Deploying it to the staging server'
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo 'Run the Integration Test on Staging server...!'
                echo 'Staging of integration test using Postman'
            }
        }
        stage('Deploy to Production') {
            steps {
                echo 'Application deployment to the Production environment...! $PROD_ENV environment'
                echo 'Application Deployment using AWS EC2 instance'
            }
        }
    }

    post {
        always {
            emailext (
                subject: 'Pipeline Successful: ${currentBuild.result}',
                body: '''<html>
                    <body>
                    <p>Build Status: ${currentBuild.result}</p>
                    <p>Build Number: ${currentBuild.number}</p>
                    <p>Console Output: <a href="${env.BUILD_URL}console">${env.BUILD_URL}console</a></p>
                    </body>
                    </html>''',
                to: 'ajayofficial1998@gmail.com',
                from: 'jenkinsgithub@example.com',
                replyTo: 'jenkinsgithub@example.com',
                mimeType: 'text/html'
            )
        }
    }
}
